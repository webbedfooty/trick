require "sinatra"
# Card trick
##########################################################################
deck_of_cards = [" As", " 2s", " 3s", " 4s", " 5s", " 6s", " 7s", " 8s", " 9s", "10s", " Js", " Qs", " Ks",
                 " Ad", " 2d", " 3d", " 4d", " 5d", " 6d", " 7d", " 8d", " 9d", "10d", " Jd", " Qd", " Kd",
                 " Ac", " 2c", " 3c", " 4c", " 5c", " 6c", " 7c", " 8c", " 9c", "10c", " Jc", " Qc", " Kc",
                 " Ah", " 2h", " 3h", " 4h", " 5h", " 6h", " 7h", " 8h", " 9h", "10h", " Jh", " Qh", " Kh"]

puts "\nHere is a standard deck of cards in ASCII format"
puts "\n Spades.....  As,  2s,  3s,  4s,  5s,  6s,  7s,  8s,  9s,  10s,  Js,  Qs,  Ks"
puts "\n Diamonds...  Ad,  2d,  3d,  4d,  5d,  6d,  7d,  8d,  9d,  10d,  Jd,  Qd,  Kd"
puts "\n Clubs......  Ac,  2c,  3c,  4c,  5c,  6c,  7c,  8c,  9c,  10c,  Jc,  Qc,  Kc"
puts "\n Hearts.....  Ah,  2h,  3h,  4h,  5h,  6h,  7h,  8h,  9h,  10h,  Jh,  Qh,  Kh"

sc = deck_of_cards.sample(21)

fr_1 = [sc[0], sc[1], sc[2], sc[3], sc[4], sc[5], sc[6]]
sd_1 = [sc[7], sc[8], sc[9], sc[10], sc[11], sc[12], sc[13]]
th_1 = [sc[14], sc[15], sc[16], sc[17], sc[18], sc[19], sc[20]]

row_one_1 = fr_1.map { |k| "#{k}" }.join("  ")
row_two_1 = sd_1.map { |k| "#{k}" }.join("  ")
row_three_1 = th_1.map { |k| "#{k}" }.join("  ")
##########################################################################
# Step 1
puts "\n\nHere is a random sampling of 21 cards from the deck and put in to three rows"
puts "\n     Row 1 = #{row_one_1}"
puts "\n     Row 2 = #{row_two_1}"
puts "\n     Row 3 = #{row_three_1}"
puts ""
puts "Now I am going to guess your card after just 3 steps"
puts ""
puts "Step 1"
puts ""
puts "\nDon't tell me your card, but tell me which row it is in"
puts "using just the number. For example, if it is in Row 1, enter 1"
choice_1 = gets.chomp

while choice_1 != "1" && choice_1 != "2" && choice_1 != "3"
  puts "Please enter a valid number"
  puts "1  2  or  3"
  choice_1 = gets.chomp
end

if choice_1 == "1"
  fr_2 = [sd_1[0], sd_1[3], sd_1[6], fr_1[2], fr_1[5], th_1[1], th_1[4]]
  sd_2 = [sd_1[1], sd_1[4], fr_1[0], fr_1[3], fr_1[6], th_1[2], th_1[5]]
  th_2 = [sd_1[2], sd_1[5], fr_1[1], fr_1[4], th_1[0], th_1[3], th_1[6]]
elsif choice_1 == "2"
  fr_2 = [fr_1[0], fr_1[3], fr_1[6], sd_1[2], sd_1[5], th_1[1], th_1[4]]
  sd_2 = [fr_1[1], fr_1[4], sd_1[0], sd_1[3], sd_1[6], th_1[2], th_1[5]]
  th_2 = [fr_1[2], fr_1[5], sd_1[1], sd_1[4], th_1[0], th_1[3], th_1[6]]
elsif choice_1 == "3"
  fr_2 = [fr_1[0], fr_1[3], fr_1[6], th_1[2], th_1[5], sd_1[1], sd_1[4]]
  sd_2 = [fr_1[1], fr_1[4], th_1[0], th_1[3], th_1[6], sd_1[2], sd_1[5]]
  th_2 = [fr_1[2], fr_1[5], th_1[1], th_1[4], sd_1[0], sd_1[3], sd_1[6]]
end
##########################################################################
# Step 2
row_one_2 = fr_2.map { |k| "#{k}" }.join("  ")
row_two_2 = sd_2.map { |k| "#{k}" }.join("  ")
row_three_2 = th_2.map { |k| "#{k}" }.join("  ")
puts ""
puts "- - - - - Shuffle sound - - - - - - "
puts ""
puts "Here are the same 21 cards reordered"
puts ""
puts "\n     Row 1 = #{row_one_2}"
puts "\n     Row 2 = #{row_two_2}"
puts "\n     Row 3 = #{row_three_2}"
puts ""
puts "\nStep 2"
puts ""
puts "\nAgain, don't tell me your card, just tell me which row it is in"
puts "using just the number. For example, if it is in Row 2, enter 2"
puts ""
choice_2 = gets.chomp

while choice_2 != "1" && choice_2 != "2" && choice_2 != "3"
  puts "Please enter a valid number"
  puts "1  2  or  3"
  puts ""
  choice_2 = gets.chomp
end

if choice_2 == "1"
  fr_3 = [sd_2[0], sd_2[3], sd_2[6], fr_2[2], fr_2[5], th_2[1], th_2[4]]
  sd_3 = [sd_2[1], sd_2[4], fr_2[0], fr_2[3], fr_2[6], th_2[2], th_2[5]]
  th_3 = [sd_2[2], sd_2[5], fr_2[1], fr_2[4], th_2[0], th_2[3], th_2[6]]
elsif choice_2 == "2"
  fr_3 = [fr_2[0], fr_2[3], fr_2[6], sd_2[2], sd_2[5], th_2[1], th_2[4]]
  sd_3 = [fr_2[1], fr_2[4], sd_2[0], sd_2[3], sd_2[6], th_2[2], th_2[5]]
  th_3 = [fr_2[2], fr_2[5], sd_2[1], sd_2[4], th_2[0], th_2[3], th_2[6]]
elsif choice_2 == "3"
  fr_3 = [fr_2[0], fr_2[3], fr_2[6], th_2[2], th_2[5], sd_2[1], sd_2[4]]
  sd_3 = [fr_2[1], fr_2[4], th_2[0], th_2[3], th_2[6], sd_2[2], sd_2[5]]
  th_3 = [fr_2[2], fr_2[5], th_2[1], th_2[4], sd_2[0], sd_2[3], sd_2[6]]
end
##########################################################################
# Step 3
row_one_3 = fr_3.map { |k| "#{k}" }.join("  ")
row_two_3 = sd_3.map { |k| "#{k}" }.join("  ")
row_three_3 = th_3.map { |k| "#{k}" }.join("  ")

puts ""
puts "- - - - - - - Shuffle sound - - - - - - - - "
puts ""
puts "Again, here are the same 21 cards reordered"
puts ""
puts "\n     Row 1 = #{row_one_3}"
puts "\n     Row 2 = #{row_two_3}"
puts "\n     Row 3 = #{row_three_3}"
puts ""
puts "\nStep 3"
puts ""
puts "\nAgain, don't tell me your card, just tell me which row it is in"
puts "using just the number. For example, if it is in Row 3, enter 3"
puts ""
choice_3 = gets.chomp

while choice_3 != "1" && choice_3 != "2" && choice_3 != "3"
  puts "Please enter a valid number"
  puts "1  2  or  3"
  puts ""
  choice_3 = gets.chomp
end

if choice_3 == "1"
  fr_4 = [sd_3[0], sd_3[3], sd_3[6], fr_3[2], fr_3[5], th_3[1], th_3[4]]
  sd_4 = [sd_3[1], sd_3[4], fr_3[0], fr_3[3], fr_3[6], th_3[2], th_3[5]]
  th_4 = [sd_3[2], sd_3[5], fr_3[1], fr_3[4], th_3[0], th_3[3], th_3[6]]
elsif choice_3 == "2"
  fr_4 = [fr_3[0], fr_3[3], fr_3[6], sd_3[2], sd_3[5], th_3[1], th_3[4]]
  sd_4 = [fr_3[1], fr_3[4], sd_3[0], sd_3[3], sd_3[6], th_3[2], th_3[5]]
  th_4 = [fr_3[2], fr_3[5], sd_3[1], sd_3[4], th_3[0], th_3[3], th_3[6]]
elsif choice_3 == "3"
  fr_4 = [fr_3[0], fr_3[3], fr_3[6], th_3[2], th_3[5], sd_3[1], sd_3[4]]
  sd_4 = [fr_3[1], fr_3[4], th_3[0], th_3[3], th_3[6], sd_3[2], sd_3[5]]
  th_4 = [fr_3[2], fr_3[5], th_3[1], th_3[4], sd_3[0], sd_3[3], sd_3[6]]
end

your_card = sd_4[3]

puts "\nYour Card is #{your_card}"
puts "Pretty cool, huh?"
puts ""
